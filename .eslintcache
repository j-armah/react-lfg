[{"/Users/jeremyarmah/Flatiron/code/Mod5/phase5-project/react-lfg/src/components/App.js":"1","/Users/jeremyarmah/Flatiron/code/Mod5/phase5-project/react-lfg/src/components/Login.js":"2","/Users/jeremyarmah/Flatiron/code/Mod5/phase5-project/react-lfg/src/components/GamePage.js":"3","/Users/jeremyarmah/Flatiron/code/Mod5/phase5-project/react-lfg/src/components/UserCard.js":"4","/Users/jeremyarmah/Flatiron/code/Mod5/phase5-project/react-lfg/src/index.js":"5","/Users/jeremyarmah/Flatiron/code/Mod5/phase5-project/react-lfg/src/components/Nav.js":"6","/Users/jeremyarmah/Flatiron/code/Mod5/phase5-project/react-lfg/src/components/AddGame.js":"7","/Users/jeremyarmah/Flatiron/code/Mod5/phase5-project/react-lfg/src/components/GameCard.js":"8","/Users/jeremyarmah/Flatiron/code/Mod5/phase5-project/react-lfg/src/components/UserShow.js":"9","/Users/jeremyarmah/Flatiron/code/Mod5/phase5-project/react-lfg/src/components/UserGameDetail.js":"10","/Users/jeremyarmah/Flatiron/code/Mod5/phase5-project/react-lfg/src/components/PlaySessionForm.js":"11","/Users/jeremyarmah/Flatiron/code/Mod5/phase5-project/react-lfg/src/components/ReviewForm.js":"12","/Users/jeremyarmah/Flatiron/code/Mod5/phase5-project/react-lfg/src/components/EditUserInfo.js":"13","/Users/jeremyarmah/Flatiron/code/Mod5/phase5-project/react-lfg/src/components/EditUserGameDetail.js":"14","/Users/jeremyarmah/Flatiron/code/Mod5/phase5-project/react-lfg/src/theme.js":"15","/Users/jeremyarmah/Flatiron/code/Mod5/phase5-project/react-lfg/src/components/UserGameCard.js":"16","/Users/jeremyarmah/Flatiron/code/Mod5/phase5-project/react-lfg/src/components/SignUp.js":"17","/Users/jeremyarmah/Flatiron/code/Mod5/phase5-project/react-lfg/src/components/InboxComponent.js":"18","/Users/jeremyarmah/Flatiron/code/Mod5/phase5-project/react-lfg/src/components/Inbox.js":"19","/Users/jeremyarmah/Flatiron/code/Mod5/phase5-project/react-lfg/src/components/Dashboard.js":"20","/Users/jeremyarmah/Flatiron/code/Mod5/phase5-project/react-lfg/src/components/dashboard/SentComments.js":"21","/Users/jeremyarmah/Flatiron/code/Mod5/phase5-project/react-lfg/src/components/dashboard/EditReview.js":"22","/Users/jeremyarmah/Flatiron/code/Mod5/phase5-project/react-lfg/src/components/dashboard/ReceivedComments.js":"23","/Users/jeremyarmah/Flatiron/code/Mod5/phase5-project/react-lfg/src/components/UserGameDetailCard.js":"24"},{"size":9042,"mtime":1613449763697,"results":"25","hashOfConfig":"26"},{"size":5669,"mtime":1613448749325,"results":"27","hashOfConfig":"26"},{"size":9658,"mtime":1613449790397,"results":"28","hashOfConfig":"26"},{"size":3791,"mtime":1613449886290,"results":"29","hashOfConfig":"26"},{"size":939,"mtime":1612566091729,"results":"30","hashOfConfig":"26"},{"size":11366,"mtime":1613449250493,"results":"31","hashOfConfig":"26"},{"size":1495,"mtime":1613011697106,"results":"32","hashOfConfig":"26"},{"size":1740,"mtime":1612926063910,"results":"33","hashOfConfig":"26"},{"size":29621,"mtime":1613449977010,"results":"34","hashOfConfig":"26"},{"size":21877,"mtime":1613449950744,"results":"35","hashOfConfig":"26"},{"size":4703,"mtime":1613449177533,"results":"36","hashOfConfig":"26"},{"size":8335,"mtime":1613449854985,"results":"37","hashOfConfig":"26"},{"size":4457,"mtime":1612814457462,"results":"38","hashOfConfig":"26"},{"size":4453,"mtime":1613408380801,"results":"39","hashOfConfig":"26"},{"size":257,"mtime":1612543059693,"results":"40","hashOfConfig":"26"},{"size":1313,"mtime":1613449325011,"results":"41","hashOfConfig":"26"},{"size":6026,"mtime":1613448811117,"results":"42","hashOfConfig":"26"},{"size":4710,"mtime":1613011196962,"results":"43","hashOfConfig":"26"},{"size":371,"mtime":1613011710771,"results":"44","hashOfConfig":"26"},{"size":5260,"mtime":1613447955866,"results":"45","hashOfConfig":"26"},{"size":4200,"mtime":1613449638794,"results":"46","hashOfConfig":"26"},{"size":8036,"mtime":1613449424592,"results":"47","hashOfConfig":"26"},{"size":3620,"mtime":1613449635000,"results":"48","hashOfConfig":"26"},{"size":1547,"mtime":1613408950917,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"18f01r6",{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"52"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"52"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"52"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"85"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"52"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"52"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"52"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"/Users/jeremyarmah/Flatiron/code/Mod5/phase5-project/react-lfg/src/components/App.js",[],["107","108"],"/Users/jeremyarmah/Flatiron/code/Mod5/phase5-project/react-lfg/src/components/Login.js",[],"/Users/jeremyarmah/Flatiron/code/Mod5/phase5-project/react-lfg/src/components/GamePage.js",[],"/Users/jeremyarmah/Flatiron/code/Mod5/phase5-project/react-lfg/src/components/UserCard.js",[],"/Users/jeremyarmah/Flatiron/code/Mod5/phase5-project/react-lfg/src/index.js",[],"/Users/jeremyarmah/Flatiron/code/Mod5/phase5-project/react-lfg/src/components/Nav.js",["109"],"import React, { useState } from 'react'\nimport { useLocation, useHistory } from 'react-router-dom'\nimport { Button, AppBar, Toolbar, Typography } from '@material-ui/core'\nimport { makeStyles, fade } from '@material-ui/core/styles'\nimport IconButton from '@material-ui/core/IconButton';\n// import InputBase from '@material-ui/core/InputBase';\n// import InputAdornment from '@material-ui/core/InputAdornment';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Menu from '@material-ui/core/Menu';\nimport MenuIcon from '@material-ui/icons/Menu';\n// import SearchIcon from '@material-ui/icons/Search';\nimport Avatar from '@material-ui/core/Avatar';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\n\n\nconst useStyles = makeStyles((theme) => ({\n    grow: {\n        flexGrow: 1,\n    },\n    appBar: {\n        paddingBottom: 0,\n    },\n    menuButton: {\n        marginRight: theme.spacing(2),\n        marginLeft: theme.spacing(1),\n    },\n    title: {\n        // flexGrow: 1,\n        display: 'none',\n        [theme.breakpoints.up('sm')]: {\n            display: 'block',\n        },\n    },\n    search: {\n        position: 'relative',\n        borderRadius: theme.shape.borderRadius,\n        backgroundColor: fade(theme.palette.common.white, 0.15),\n        '&:hover': {\n            backgroundColor: fade(theme.palette.common.white, 0.25),\n        },\n        marginRight: theme.spacing(2),\n        marginLeft: 0,\n        width: '100%',\n        // height:'50%',\n        display:'flex',\n        [theme.breakpoints.up('sm')]: {\n            marginLeft: theme.spacing(3),\n            width: 'auto',\n        },\n    },\n    searchIcon: {\n        padding: theme.spacing(0, 2),\n        height: '100%',\n        position: 'absolute',\n        pointerEvents: 'none',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n    },\n    inputRoot: {\n        color: 'inherit',\n    },\n    inputInput: {\n        padding: theme.spacing(1, 1, 1, 0),\n        // vertical padding + font size from searchIcon\n        paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\n        transition: theme.transitions.create('width'),\n        width: '100%',\n        [theme.breakpoints.up('md')]: {\n            width: '12ch',\n            '&:focus': {\n                width: '22ch',\n            },\n        },\n    },\n    sectionDesktop: {\n        display: 'none',\n        [theme.breakpoints.up('md')]: {\n            display: 'flex',\n        },\n    },\n    large: {\n        width: theme.spacing(7),\n        height: theme.spacing(7),\n    },\n    login: {\n        marginRight: theme.spacing(1),\n    },\n    form: {\n        width: '100%',\n    }\n}));\n\n\nfunction Nav({ currentUser, handleLogout, users }) {\n    // const [search, setSearch] = useState(\"\")\n    const [anchorEl, setAnchorEl] = useState(null)\n    const history = useHistory()\n    const classes = useStyles()\n    const location = useLocation()\n    const isMenuOpen = Boolean(anchorEl)\n\n    //  test \n    const [value, setValue] = useState(null);\n    const [inputValue, setInputValue] = useState('');\n\n    const handleProfileMenuOpen = (event) => {\n        // console.log(event.currentTarget)\n        setAnchorEl(event.currentTarget);\n    };\n\n    const handleMenuCloseProfile = () => {\n        history.push(`/users/${currentUser.id}`)\n        setAnchorEl(null);\n    };\n\n    const handleLogoutClose = () => {\n        setAnchorEl(null);\n        handleLogout()\n    }\n\n    const handleMenuCloseInbox = () => {\n        history.push(`/inbox`)\n        setAnchorEl(null);\n    };\n\n    const handleMenuCloseDash = () => {\n        history.push(`/dashboard`)\n        setAnchorEl(null);\n    };\n\n    const handleMenuClose = () => {\n        setAnchorEl(null);\n    };\n\n    const menuId = 'primary-search-account-menu';\n    const renderMenu = (\n        <Menu\n            anchorEl={anchorEl}\n            anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}\n            id={menuId}\n            keepMounted\n            transformOrigin={{ vertical: 'bottom', horizontal: 'center' }}\n            open={isMenuOpen}\n            onClose={handleMenuClose}\n        >\n            <MenuItem onClick={handleMenuCloseProfile}>Profile</MenuItem>\n            <MenuItem onClick={handleMenuCloseInbox}>Inbox</MenuItem>\n            <MenuItem onClick={handleMenuCloseDash}>Dashboard</MenuItem>\n            <MenuItem onClick={handleLogoutClose}>Logout</MenuItem> \n        </Menu>\n    );\n    \n    // console.log(value)\n    const handleSearch = (event) => {\n        event.preventDefault()\n\n        // console.log(inputValue)\n        // console.log(value)\n        // debugger\n        if (value !== null) {\n            // console.log(value)\n            const searchUser = users.find(user => value === user.username)\n            history.push(`/users/${searchUser.id}`)\n            setValue(null)\n        }\n        \n    }\n    \n    // console.log(search)\n    \n    if (location.pathname === \"/\" || location.pathname === \"/signup\") return null\n    return (\n    <div className={classes.grow}>\n        \n    <AppBar position=\"static\" className={classes.appBar}>\n        <Toolbar id=\"back-to-top-anchor\">\n        <div className=\"logo\">\n            <img height=\"50px\" width=\"110px\" alt=\"logo\" src=\"https://i.imgur.com/NoEHEH8.png\" />\n        </div>\n        <IconButton\n            edge=\"start\"\n            className={classes.menuButton}\n            color=\"inherit\"\n            aria-label=\"open drawer\"\n        >\n            <MenuIcon />\n        </IconButton>\n        <Button className={classes.title} onClick={() => history.push(\"/games\")}>\n            All Games\n        </Button>\n        \n        \n        <div className={classes.grow} />\n        <div className={classes.search}>\n                {/* <div className={classes.searchIcon}>\n                    <SearchIcon />\n                </div>\n                <InputBase\n                placeholder=\"Search…\"\n                classes={{\n                    root: classes.inputRoot,\n                    input: classes.inputInput,\n                }}\n                inputProps={{ 'aria-label': 'search' }}\n                /> */}\n            <form onSubmit={handleSearch}>\n                <Autocomplete\n                    value={value}\n                    onChange={(event, newValue) => {\n                    setValue(newValue);\n                    }}\n                    inputValue={inputValue}\n                    onInputChange={(event, newInputValue) => {\n                    setInputValue(newInputValue);\n                    }}\n                    id=\"search-users\"\n                    options={users.sort((userA, userB) => \n                        userB.avg - userA.avg\n                        ).map((user) => \n                        user.username\n                    )}\n        \n                    style={{ width: 300 }}\n                    renderInput={(params) => <TextField {...params} \n                    // InputProps={{\n                    //     startAdornment: (\n                    //     <InputAdornment position=\"start\">\n                    //         <SearchIcon />\n                    //     </InputAdornment>\n                    //     ),\n                    // }}    \n                    label=\"Search users...\" variant=\"filled\" />\n                    }   \n                />\n            </form>\n                {/* <form className={classes.form} onSubmit={handleSearch}>\n                <Autocomplete\n                    // freeSolo\n                    fullWidth\n                    autoSelect={true}\n                    id=\"free-solo-2-demo\"\n                    disableClearable\n                    options={users.map((user) => \n                        user.username\n                        )}\n                    onSubmit={() => console.log(search)}\n                    inputValue={search}\n                    onInputChange={(e) => setSearch(e.target.value)}\n                    renderInput={(params) => (\n                    <TextField\n                        {...params}\n                        label=\"Search Users\"\n                        margin=\"normal\"\n                        variant=\"outlined\"\n                        className={classes.autocomplete}\n                        // value={search}\n                        // onChange={(e) => setSearch(e.target.value)}\n                        // classes={{\n                        //     root: classes.inputRoot,\n                        //     input: classes.inputInput,\n                        // }}\n                        InputProps={{ ...params.InputProps, type: 'search' }}\n                    />\n                    )}\n                />\n                </form> */}\n                \n        </div>\n        \n        \n        <div className={classes.sectionDesktop}>\n            \n            {/* <IconButton aria-label=\"show 4 new mails\" color=\"inherit\">\n            <Badge badgeContent={4} color=\"secondary\">\n                <MailIcon />\n            </Badge>\n            </IconButton>\n            <IconButton aria-label=\"show 17 new notifications\" color=\"inherit\">\n            <Badge badgeContent={17} color=\"secondary\">\n                <NotificationsIcon />\n            </Badge>\n            </IconButton> */}\n            {!currentUser ? \n            <div>\n                <Button onClick={() => history.push('/')} variant=\"outlined\" color=\"inherit\" className={classes.login}>Login</Button>\n                <Button onClick={() => history.push('/signup')} color=\"secondary\" variant=\"contained\">Signup</Button>\n            </div>\n            :\n            <IconButton\n                edge=\"end\"\n                onClick={handleProfileMenuOpen}\n                color=\"inherit\"\n            >\n                <Avatar src={currentUser.avatar} className={classes.large} alt={currentUser.username}/>\n            </IconButton>\n            }\n        </div>\n        </Toolbar>\n    </AppBar>\n    {renderMenu}\n    </div>\n    );\n\n    // const location = useLocation()\n    // if (location.pathname === \"/\") return null\n    // return (\n    //     <AppBar className=\"nav\" position=\"static\">\n    //         <Toolbar>  \n    //             <Typography component={'div'} className=\"nav-games\">\n    //                 <NavLink to={\"/games\"}>\n    //                     Games\n    //                 </NavLink>\n    //             </Typography>              \n    //             <Typography component={'div'} className=\"user-nav-div\">\n    //                 {!currentUser ?\n    //                     <div>\n    //                         <NavLink exact to={\"/\"}>\n    //                             Login\n    //                         </NavLink>\n    //                     </div> \n    //                     :\n    //                     <div className=\"logged-in\">\n    //                         <div className='welcome-div'>\n    //                             <NavLink exact to={`/users/${currentUser.id}`} className=\"nav-button\">\n    //                                <Typography>Welcome, {currentUser.username}!</Typography> \n    //                             </NavLink>\n    //                             <Button color=\"secondary\" variant=\"contained\" className=\"nav-button\" onClick={handleLogout}>Logout</Button>\n    //                         </div>\n    //                     </div>} \n    //             </Typography>\n    //         </Toolbar>\n    //     </AppBar>\n    // )\n}\n\n\n\nexport default Nav\n","/Users/jeremyarmah/Flatiron/code/Mod5/phase5-project/react-lfg/src/components/AddGame.js",[],"/Users/jeremyarmah/Flatiron/code/Mod5/phase5-project/react-lfg/src/components/GameCard.js",[],"/Users/jeremyarmah/Flatiron/code/Mod5/phase5-project/react-lfg/src/components/UserShow.js",[],"/Users/jeremyarmah/Flatiron/code/Mod5/phase5-project/react-lfg/src/components/UserGameDetail.js",[],"/Users/jeremyarmah/Flatiron/code/Mod5/phase5-project/react-lfg/src/components/PlaySessionForm.js",["110","111"],"import React , { useState } from 'react'\n// import { MuiPickersUtilsProvider } from '@material-ui/pickers';\n// import DateTimePicker from 'react-datetime-picker'\n// import { format } from 'date-fns';\n// import DateFnsUtils from '@date-io/date-fns'\nimport { makeStyles } from '@material-ui/core/styles';\nimport Avatar from '@material-ui/core/Avatar';\nimport { FormControl, Button, FormLabel, Typography, Grid, TextField, Box } from '@material-ui/core';\n// import DateTimePicker from '@material-ui/lab/DateTimePicker';\n// import AdapterDateFns from '@material-ui/lab/AdapterDateFns';\n// import LocalizationProvider from '@material-ui/lab/LocalizationProvider';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n      display: 'flex',\n      flexWrap: 'wrap',\n    },\n    textField: {\n      marginLeft: theme.spacing(1),\n      marginRight: theme.spacing(1),\n      width: '25ch',\n    },\n    label: {\n        margin: theme.spacing(2),\n    },\n    large: {\n        height: theme.spacing(35),\n        width: theme.spacing(35)\n    },\n    submit: {\n        margin: theme.spacing(2)\n    },\n    date: {\n        // margin: theme.spacing\n    },\n    // containerBox: {\n    //     borderTopRightRadius: \"40px\"\n    // }\n}));\n\nfunction PlaySessionForm({ currentUser, userGame, setOpen}) {\n    // const [dateTime, setDateTime] = useState(null)\n    const [dateTime, setDateTime] = useState(new Date());\n    const classes = useStyles()\n\n    // console.log(\"currentUser in form\", currentUser)\n    // console.log(\"usergame on form\", userGame)\n\n\n    function handleSubmit(event) {\n        event.preventDefault()\n\n        const playRequest = {\n            sender_id: currentUser.id,\n            receiver_id: parseInt(userGame.user.id, 10),\n            game_id: parseInt(userGame.game_id, 10),\n            is_accepted: false,\n            rejected: false,\n            time: dateTime\n        }\n        console.log(dateTime)\n\n        console.log(playRequest)\n\n        fetch(`${process.env.REACT_APP_API_BASE_URL}/play_sessions`, {\n            method: 'POST',\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(playRequest)\n        })\n        .then(resp => resp.json())\n        .then(data => {\n            console.log(data)\n            setOpen(false)\n        })\n\n    }\n\n    return (\n        <Box className={classes.containerBox}>\n            <Grid container className={classes.root} spacing={2}>\n                <Grid item xs={12}>\n                    <Box display=\"flex\" justifyContent=\"center\"> <Typography paragraph variant={\"h5\"}>Request to {userGame.user.username}</Typography></Box>\n                    <Box display=\"flex\" justifyContent=\"center\">\n                        \n                        <Avatar src={userGame.user.avatar} alt={userGame.user.username} className={classes.large}/>\n                    </Box>\n                </Grid>  \n                <Grid item xs={12}>\n                    <Box display=\"flex\" justifyContent=\"center\" className={classes.date}>\n                    <FormControl onSubmit={handleSubmit}>\n                        \n                        <FormLabel >Start Time: </FormLabel>\n\n                            <TextField\n                                id=\"datetime-local\"\n                                // label=\"Next appointment\"\n                                type=\"datetime-local\"\n                                // defaultValue={format(Date.now, 'YYYY-MM-DD[T]HH:mmZZ')}\n                                style={{ width: 250 }}\n                                onChange={(event) => setDateTime(event.target.value)}\n                                InputLabelProps={{\n                                shrink: true,\n                                \n                                }}\n                            />\n                        <Button color=\"secondary\" variant=\"contained\" onClick={handleSubmit} className={classes.submit}> Send Request </Button>\n                    </FormControl>\n                    </Box>\n                </Grid>\n            </Grid>\n        </Box>\n    )\n}\n\nexport default PlaySessionForm\n\n\n{/* \n                <DateTimePicker\n                    onChange={setDateTime}\n                    value={dateTime}\n\n                /> */}\n                {/* <LocalizationProvider dateAdapter={AdapterDateFns}>\n                    <DateTimePicker\n                        renderInput={(props) => <TextField {...props} />}\n                        label=\"DateTimePicker\"\n                        value={value}\n                        onChange={(newValue) => {\n                        setValue(newValue);\n                        }}\n                    />\n                    </LocalizationProvider> */}","/Users/jeremyarmah/Flatiron/code/Mod5/phase5-project/react-lfg/src/components/ReviewForm.js",["112"],"import React, { useState, useEffect } from 'react'\n// import { useHistory } from 'react-router-dom'\nimport Rating from '@material-ui/lab/Rating';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { FormControl, Button, FormLabel, TextareaAutosize, Typography, Box, Grid, Paper } from '@material-ui/core';\n// import CardMedia from '@material-ui/core/CardMedia';\n// import CardActionArea from '@material-ui/core/CardActionArea';\n// import CardActions from '@material-ui/core/CardActions';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Avatar from '@material-ui/core/Avatar';\n\n\n\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n      display: 'flex',\n      flexWrap: 'wrap',\n    },\n    textField: {\n      marginLeft: theme.spacing(1),\n      marginRight: theme.spacing(1),\n      width: '25ch',\n    },\n    label: {\n        margin: theme.spacing(2),\n    },\n    cardContent: {\n        alignItems: \"auto\"\n    },\n    large: {\n        width: theme.spacing(50),\n        height: theme.spacing(50),\n    },\n    avatarBox: {\n        margin: theme.spacing(2)\n    },\n    tagBox: {\n        maringTop: theme.spacing(2)\n        // width: \"50%\"\n    },\n    textArea: {\n        marginLeft: theme.spacing(10),\n        marginRight: theme.spacing(10),\n        marginBottom: theme.spacing(2),\n        marginTop: theme.spacing(2)\n        // width: \"80%\"\n    },\n    submit: {\n        marginLeft: theme.spacing(10),\n        marginRight: theme.spacing(10),\n        marginBottom: theme.spacing(2)\n    }\n}));\n\nfunction ReviewForm({ currentUser, session, reviewee, handleCloseReview, updateSession }) {\n    const [contents, setContents] = useState(\"\")\n    const [rating, setRating] = useState(5)\n    const [tags, setTags] = useState([])\n    // const [addedTags, setAddedTags] = useState([])\n    // const history = useHistory()\n    const classes = useStyles()\n    const [state, setState] = useState({\n        2: false,\n        3: false,\n        4: false,\n        5: false,\n        6: false,\n        7: false,\n        8: false,\n        9: false,\n        10: false,\n    });\n\n\n    console.log(rating)\n    console.log(reviewee)\n    console.log(state)\n\n    \n    const handleChange = (event) => {\n        setState({ ...state, [event.target.name]: event.target.checked });\n    };\n\n\n    useEffect(() => {\n        fetch(`${process.env.REACT_APP_API_BASE_URL}/tags`)\n            .then(resp => resp.json())\n            .then(data => {\n                setTags(data)\n            })\n    }, [])\n\n    function handleSubmit(event) {\n        event.preventDefault()\n\n        const reviewData = {\n            reviewer_id: parseInt(currentUser.id),\n            reviewee_id: parseInt(reviewee.id),\n            contents: contents,\n            rating: parseFloat(rating),\n            play_session_id: parseInt(session.id)\n        }\n\n        let tagsArray = []\n\n        for (const [key, value] of Object.entries(state)) {\n            if (value === true) {\n                tagsArray = [...tagsArray, parseInt(key)]\n            }\n        }\n\n        console.log(reviewData)\n        console.log(tagsArray)\n\n\n        fetch(`${process.env.REACT_APP_API_BASE_URL}/reviews`, {\n            method: 'POST',\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(reviewData)\n        })\n        .then(resp => resp.json())\n        .then(newReviewObj => {\n            console.log(newReviewObj)\n            // if (newReviewObj.id === null) {\n            //     alert(\"Can only review a user once!\")\n            // } else {\n            //     history.push(`/users/${currentUser.id}`)\n            // }\n            for (const id of tagsArray) {\n                fetch(`${process.env.REACT_APP_API_BASE_URL}/review_tags`, {\n                    method: 'POST',\n                    headers: {\n                        \"Content-Type\": \"application/json\"\n                    }, \n                    body: JSON.stringify({\n                        review_id: newReviewObj.id,\n                        tag_id: id\n                    })\n                })\n                .then(resp => resp.json())\n                .then(reviewTag => {\n                    console.log(reviewTag)\n                })\n            }\n            console.log(\"done\")\n            handleCloseReview()\n            updateSession(session ,newReviewObj)\n        })\n    }\n    return (\n        <Paper>\n        <Grid container>\n            <Grid item xs={1}/>\n            <Grid item xs={10}>\n            \n                <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" className={classes.avatarBox}>\n                    <Avatar src={reviewee.avatar} className={classes.large}/>\n                </Box>\n                <FormControl onSubmit={handleSubmit}>\n                    <Box display=\"flex\" justifyContent=\"center\"><Typography paragraph variant={\"h6\"}> Comment for {reviewee.username} on {session.game.name}</Typography> </Box>\n                    <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\">\n                        <FormLabel> Rate: </FormLabel>\n                        <Rating\n                            name=\"rating\"\n                            precision={0.5}\n                            value={rating}\n                            onChange={(event, newValue) => {\n                                setRating(newValue);\n                            }}\n                        />\n                    </Box>\n                    <Box className={classes.tagBox}>\n\n                        <Grid container>\n                        <Grid item xs={3}/>\n                        <Grid item xs={6} alignContent=\"center\" alignItems=\"center\">\n                        <FormControlLabel\n                            control={<Checkbox checked={state.id} onChange={handleChange} name={2} />}\n                            label={\"Chill\"}\n                        />\n                        <FormControlLabel\n                            control={<Checkbox checked={state.id} onChange={handleChange} name={3} />}\n                            label={\"Tilt-proof\"}\n                        />\n                        <FormControlLabel\n                            control={<Checkbox checked={state.id} onChange={handleChange} name={4} />}\n                            label={\"Team player\"}\n                        />\n                        <FormControlLabel\n                            control={<Checkbox checked={state.id} onChange={handleChange} name={5} />}\n                            label={\"Friendly\"}\n                        />\n                        <FormControlLabel\n                            control={<Checkbox checked={state.id} onChange={handleChange} name={6} />}\n                            label={\"Interactive\"}\n                        />\n                        <FormControlLabel\n                            control={<Checkbox checked={state.id} onChange={handleChange} name={7} />}\n                            label={\"Strategic\"}\n                        />\n                        <FormControlLabel\n                            control={<Checkbox checked={state.id} onChange={handleChange} name={8} />}\n                            label={\"Humorous\"}\n                        />\n                        <FormControlLabel\n                            control={<Checkbox checked={state.id} onChange={handleChange} name={9} />}\n                            label={\"Creative\"}\n                        />\n                        <FormControlLabel\n                            control={<Checkbox checked={state.id} onChange={handleChange} name={10} />}\n                            label={\"Carry\"}\n                        />\n                        </Grid>\n                        <Grid item xs={3}/>\n                        </Grid>\n                    </Box>\n                    <TextareaAutosize placeholder={\"Leave a comment (optional)\"} name=\"content\" value={contents} className={classes.textArea} onChange ={event => setContents(event.target.value)}/>\n                    \n                    <Button variant=\"contained\" color=\"secondary\" onClick={handleSubmit} className={classes.submit}>Submit Review</Button>\n                </FormControl>\n            </Grid>\n            <Grid item xs={1}/>\n        </Grid>\n        </Paper>\n    )\n}\n\n\n\nexport default ReviewForm\n","/Users/jeremyarmah/Flatiron/code/Mod5/phase5-project/react-lfg/src/components/EditUserInfo.js",[],"/Users/jeremyarmah/Flatiron/code/Mod5/phase5-project/react-lfg/src/components/EditUserGameDetail.js",[],"/Users/jeremyarmah/Flatiron/code/Mod5/phase5-project/react-lfg/src/theme.js",["113","114"],"import { createMuiTheme } from '@material-ui/core/styles';\nimport purple from '@material-ui/core/colors/purple';\nimport green from '@material-ui/core/colors/green';\n\nconst theme = createMuiTheme({\n  palette: {\n    type: \"dark\"\n  },\n});\n\nexport default theme",["115","116"],"/Users/jeremyarmah/Flatiron/code/Mod5/phase5-project/react-lfg/src/components/UserGameCard.js",[],"/Users/jeremyarmah/Flatiron/code/Mod5/phase5-project/react-lfg/src/components/SignUp.js",[],"/Users/jeremyarmah/Flatiron/code/Mod5/phase5-project/react-lfg/src/components/InboxComponent.js",["117"],"import React, { useEffect } from 'react'\nimport Talk from \"talkjs\";\n\n\nconst InboxComponent = ({ user, otherUser }) => {\n    const talkjsContainer = React.createRef();\n\n    console.log(user)\n\n    useEffect(() => {\n        \n        const currentUser = user;\n\n        Talk.ready.then(() => {\n            let me = new Talk.User({\n                id: currentUser.id,\n                name: currentUser.username,\n                photoUrl: currentUser.avatar,\n                welcomeMessage: \"Hey there! How are you? :-)\"\n            });\n\n            const session = new Talk.Session({\n                appId: \"tZAIJPQN\",\n                me: me\n            });\n\n            // console.log(session)\n            if (otherUser) {\n                let other = new Talk.User({\n                    id: otherUser.id,\n                    name: otherUser.username,\n                    // email: \"Sebastian@example.com\",\n                    photoUrl: otherUser.avatar,\n                    // welcomeMessage: \"Hey, how can I help?\"\n                });\n            \n                const conversation = session.getOrCreateConversation(Talk.oneOnOneId(me, other))\n                conversation.setParticipant(me);\n                conversation.setParticipant(other);\n    \n                \n                const inbox = session.createInbox({selected: conversation}); //{selected: conversation}\n                inbox.mount(talkjsContainer.current);\n            } else {\n                const inbox = session.createInbox(); //{selected: conversation}\n                inbox.mount(talkjsContainer.current);\n            }\n            // console.log(other)\n        })\n    },[])\n\n    console.log(talkjsContainer.current)\n    // if (talkjsContainer.current === null) return <h1>Loading...</h1>\n    return (\n        <div ref={talkjsContainer} className=\"chatbox-container\"></div>\n        // <div></div>\n    )\n}\n\n// class InboxComponent extends React.Component {\n    \n//     constructor(props) {\n//       super(props)\n//       this.talkjsContainer = React.createRef();\n//     }\n    \n//     componentDidMount() {    \n//       Talk.ready.then(() => {\n//         var me = new Talk.User({\n//           id: this.props.user.id,\n//           name: this.props.user.username,\n//         //   email: \"demo@talkjs.com\",\n//           photoUrl: this.props.user.avatar,\n//         //   welcomeMessage: \"Hey there! How are you? :-)\",\n//           role: \"user\"\n//         });\n        \n//         window.talkSession = new Talk.Session({\n//           appId: \"tZAIJPQN\",\n//           me: me\n//         });\n        \n//         var other = new Talk.User({\n//           id: this.props.otherUser.id,\n//           name: this.props.otherUser.username,\n//         //   email: \"demo@talkjs.com\",\n//           photoUrl: this.props.otherUser.avatar,\n//         //   welcomeMessage: \"Hey, how can I help?\",\n//           role: \"user\"\n//         });\n  \n//         var conversation = window.talkSession.getOrCreateConversation(Talk.oneOnOneId(me, other));\n//         conversation.setParticipant(me);\n//         conversation.setParticipant(other);\n        \n//         var inbox = window.talkSession.createInbox({selected: conversation});\n//         inbox.mount(this.talkjsContainer.current);\n//       });\n//     }\n  \n//     render() {\n//       return (\n//         <div ref={this.talkjsContainer} className=\"chatbox-container\"></div>\n//       )\n//     }\n//   }\n\n\n\n// class InboxComponent extends Component {\n\n//     constructor(props) {\n//         super(props);\n\n//         this.inbox = undefined;\n//         let currentUser;\n//         const currentTalkjsUser = localStorage.getItem('currentTalkjsUser');\n//         if (currentTalkjsUser) {\n//             currentUser = JSON.parse(currentTalkjsUser)\n//         }\n\n//         this.state = {\n//             currentUser\n//         }\n//     }\n\n\n//     componentDidMount() {\n//         Talk.ready\n//             .then(() => {\n//                 const me = new Talk.User(this.state.currentUser);\n                \n//                 if (!window.talkSession) {\n//                     window.talkSession = new Talk.Session({\n//                         appId: \"tZAIJPQN\",\n//                         me: me\n//                     });\n//                 }\n            \n//                 this.inbox = window.talkSession.createInbox();\n//                 this.inbox.mount(this.container);\n\n//             })\n//             .catch(e => console.error(e));\n//     }\n\n//     render() {\n//         return (\n//             <Fragment>\n//                 <div style={{height: '500px'}} className=\"inbox-container\" ref={c => this.container = c}>Loading...</div>\n//             </Fragment>\n//         );\n//     }\n//   }\n  \nexport default InboxComponent\n","/Users/jeremyarmah/Flatiron/code/Mod5/phase5-project/react-lfg/src/components/Inbox.js",[],"/Users/jeremyarmah/Flatiron/code/Mod5/phase5-project/react-lfg/src/components/Dashboard.js",["118","119"],"import React, { useState, useEffect } from 'react'\nimport { makeStyles } from '@material-ui/core/styles';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\n// import Typography from '@material-ui/core/Typography';\nimport { Grid, Box } from '@material-ui/core'\nimport SentComments from './dashboard/SentComments';\nimport ReceivedComments from './dashboard/ReceivedComments';\nimport List from '@material-ui/core/List';\nimport EditReview from './dashboard/EditReview';\nimport Modal from '@material-ui/core/Modal';\nimport Fade from '@material-ui/core/Fade';\nimport Backdrop from '@material-ui/core/Backdrop';\nimport CircularProgress from '@material-ui/core/CircularProgress'\n\n\n\n\n\nconst useStyles = makeStyles((theme) => ({\n    comments: {\n        marginRight: theme.spacing(4),\n    },\n    load: {\n        height: \"100vh\",\n        width: \"100%\"\n    },\n        loadBox: {\n        width: \"100%\"\n    }\n}))\n\n\nfunction Dashboard({ currentUser }) {\n    const classes = useStyles()\n    const [tab, setTab] = useState(0)\n    const [review, setReview] = useState(null)\n    const [sentReviews, setSentReviews] = useState([])\n    const [user, setUser] = useState(null)\n    const [isLoaded, setIsLoaded] = useState(false)\n    // const [requestTab, setRequestTab] = React.useState(0);\n    console.log(currentUser)\n    \n    // useEffect(() => {\n    //     const sentReviews = currentUser.reviews_as_reviewer.map(review => <SentComments key={review.id} review={review}/>)\n    // }, [])\n    // const handleRequestChange = (event, newValue) => {\n    //   setRequestTab(newValue);\n    // };\n\n    const handleChange = (event, newValue) => {\n        setTab(newValue);\n    };\n\n    const handleEdit = (review) => {\n        console.log(review)\n        setReview(review)\n        setOpen(true)\n    }\n\n    const [open, setOpen] = React.useState(false);\n\n    const handleOpen = () => {\n      setOpen(true);\n    };\n  \n    const handleClose = () => {\n      setOpen(false);\n    };\n\n    const updateReview = (updReview) => {\n        setOpen(false)\n        console.log(updReview)\n\n        const updatedReviews = sentReviews.map(review => {\n            if (review.id === updReview.id) {\n                return {...review, rating: updReview.rating, contents: updReview.contents}\n            } else {\n                return review\n            }\n        })\n        setSentReviews(updatedReviews)\n    }\n\n    const deleteReview = (delReview) => {\n        console.log(delReview)\n\n        fetch(`${process.env.REACT_APP_API_BASE_URL}/reviews/${delReview.id}`, {\n            method: 'DELETE'\n        })\n        .then(resp => resp.json())\n        .then(data => {\n            const updatedReviews = sentReviews.filter(review => review.id !== delReview.id)\n            setSentReviews(updatedReviews)\n        })\n    } \n\n    useEffect(() => {\n        fetch(`${process.env.REACT_APP_API_BASE_URL}/users/${currentUser.id}`)\n            .then(resp => resp.json())\n            .then(data => {\n                setUser(data)\n                setSentReviews(data.reviews_as_reviewer.reverse())\n                setIsLoaded(true)\n                \n            })\n    }, [])\n   \n\n    // console.log(currentUser.reviews_as_reviewee)\n    if (!isLoaded) return (\n        <Grid container className={classes.load}>\n            <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" className={classes.loadBox}>\n                <CircularProgress color=\"secondary\" />\n            </Box>\n        </Grid>\n    )\n    return (\n        <>\n        <Grid container >\n            <Grid item xs={12}>\n            <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\">\n                <Tabs value={tab} onChange={handleChange} >\n                    <Tab label=\"Sent Comments\"  />\n                    <Tab label=\"Received Comments\"  />\n                    {/* <Tab label=\"Sent Request\"  />\n                    <Tab label=\"Received Request\"  />\n                    <Tab label=\"Accepted Request\"  />   */}\n                </Tabs>       \n            </Box>\n            </Grid>\n            \n            <Grid item xs={12}>\n            <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\">\n                { tab === 0 ? <List>{sentReviews.map(review => <SentComments key={review.id} review={review} handleEdit={handleEdit} deleteReview={deleteReview}/>)}</List>  : null}\n                { tab === 1 ? <List>{user.reviews_as_reviewee.map(review => <ReceivedComments key={review.id} review={review} />)}</List> : null}\n                { tab === 2 ? 'display sent request' : null}\n                { tab === 3 ? 'display received request' : null}\n                { tab === 4 ? 'display accepted request' : null}\n                </Box>\n            </Grid>\n        </Grid>\n\n        <Modal\n            className={classes.modal}\n            open={open}\n            onClose={handleClose}\n            closeAfterTransition\n            BackdropComponent={Backdrop}\n            BackdropProps={{\n            timeout: 500,\n            }}\n        >\n            <Fade in={open}>\n            <div className={classes.paper}>\n                <EditReview review={review} updateReview={updateReview} />\n            </div>\n            </Fade>\n        </Modal>\n        </>\n    )\n}\n\nexport default Dashboard\n","/Users/jeremyarmah/Flatiron/code/Mod5/phase5-project/react-lfg/src/components/dashboard/SentComments.js",[],"/Users/jeremyarmah/Flatiron/code/Mod5/phase5-project/react-lfg/src/components/dashboard/EditReview.js",["120","121","122","123","124","125","126","127"],"import React, { useState, useEffect } from 'react'\n// import { useHistory } from 'react-router-dom'\nimport Rating from '@material-ui/lab/Rating';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { FormControl, Button, FormLabel, InputLabel, Input, TextField, TextareaAutosize, Typography, Box ,Card ,Divider ,Grid } from '@material-ui/core';\nimport CardMedia from '@material-ui/core/CardMedia';\n// import CardActionArea from '@material-ui/core/CardActionArea';\n// import CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\n// import Checkbox from '@material-ui/core/Checkbox';\n// import FormControlLabel from '@material-ui/core/FormControlLabel';\n\n\n\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n      display: 'flex',\n      flexWrap: 'wrap',\n    },\n    textField: {\n      marginLeft: theme.spacing(1),\n      marginRight: theme.spacing(1),\n    //   width: '25ch',\n    },\n    label: {\n        margin: theme.spacing(2),\n    },\n    cardContent: {\n        alignItems: \"auto\"\n    }\n}));\n\nfunction EditReview({ review, updateReview }) {\n    const [contents, setContents] = useState(review.contents)\n    const [rating, setRating] = useState(review.rating)\n    // const [tags, setTags] = useState([])\n    // const [addedTags, setAddedTags] = useState([])\n    // const history = useHistory()\n    const classes = useStyles()\n    const reviewee = review.reviewee\n    // const [state, setState] = useState({\n    //     2: false,\n    //     3: false,\n    //     4: false,\n    //     5: false,\n    //     6: false,\n    //     7: false,\n    //     8: false,\n    //     9: false,\n    //     10: false,\n    // });\n\n    \n\n    // console.log(review.tags)\n\n\n\n    // const tagBoxes = tags.map(tag => <TagBox key={tag.id} tag={tag} addedTags={addedTags} setTags/>)\n\n    // const handleChange = (event) => {\n    //     setState({ ...state, [event.target.name]: event.target.checked });\n    // };\n\n\n    // useEffect(() => {\n    //     fetch(`${process.env.REACT_APP_API_BASE_URL}/tags`)\n    //         .then(resp => resp.json())\n    //         .then(data => {\n    //             setTags(data)\n    //         })\n    // }, [])\n\n    function handleSubmit(event) {\n        event.preventDefault()\n\n        const reviewData = {\n            contents: contents,\n            rating: parseFloat(rating),\n        }\n\n        // let tagsArray = []\n\n        // for (const [key, value] of Object.entries(state)) {\n        //     if (value === true) {\n        //         tagsArray = [...tagsArray, parseInt(key)]\n        //     }\n        // }\n\n        // console.log(reviewData)\n        // console.log(tagsArray)\n\n\n        fetch(`${process.env.REACT_APP_API_BASE_URL}/reviews/${review.id}`, {\n            method: 'PATCH',\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(reviewData)\n        })\n        .then(resp => resp.json())\n        .then(newReviewObj => {\n            console.log(newReviewObj)\n            updateReview(newReviewObj)\n            // if (newReviewObj.id === null) {\n            //     alert(\"Can only review a user once!\")\n            // } else {\n            //     history.push(`/users/${currentUser.id}`)\n            // }\n            // for (const id of tagsArray) {\n            //     fetch(`${process.env.REACT_APP_API_BASE_URL}/review_tags`, {\n            //         method: 'POST',\n            //         headers: {\n            //             \"Content-Type\": \"application/json\"\n            //         }, \n            //         body: JSON.stringify({\n            //             review_id: newReviewObj.id,\n            //             tag_id: id\n            //         })\n            //     })\n            //     .then(resp => resp.json())\n            //     .then(reviewTag => {\n            //         console.log(reviewTag)\n            //     })\n            // }\n            // console.log(\"done\")\n        })\n    }\n    return (\n        <Grid container>\n            <Grid item xs={4}/>\n            <Card alignContent=\"center\">\n                <CardHeader \n                    title=\"Review\"\n                >\n                </CardHeader>\n                <CardMedia>\n                    <img height=\"400px\"src={reviewee.avatar} alt={reviewee.username} />\n                </CardMedia>\n                    <CardContent className={classes.cardContent}>\n                        <FormControl onSubmit={handleSubmit}>\n                            <label>\n                                Review {reviewee.username}<br/>\n                                <textarea name=\"content\" value={contents} onChange ={event => setContents(event.target.value)}/>\n                                <br/>\n\n                                <>\n                                <FormLabel> Rate: </FormLabel>\n                                <Rating\n                                    name=\"rating\"\n                                    precision={0.5}\n                                    value={rating}\n                                    onChange={(event, newValue) => {\n                                        setRating(newValue);\n                                    }}\n                                />\n                                </>\n                            </label>\n                            {/* <Box>\n                                \n                                <FormControlLabel\n                                    control={<Checkbox checked={state.id} onChange={handleChange} name={2} />}\n                                    label={\"Chill\"}\n                                />\n                                <FormControlLabel\n                                    control={<Checkbox checked={state.id} onChange={handleChange} name={3} />}\n                                    label={\"Tilt-proof\"}\n                                />\n                                <FormControlLabel\n                                    control={<Checkbox checked={state.id} onChange={handleChange} name={4} />}\n                                    label={\"Team player\"}\n                                />\n                                <FormControlLabel\n                                    control={<Checkbox checked={state.id} onChange={handleChange} name={5} />}\n                                    label={\"Friendly\"}\n                                />\n                                <FormControlLabel\n                                    control={<Checkbox checked={state.id} onChange={handleChange} name={6} />}\n                                    label={\"Interactive\"}\n                                />\n                                <FormControlLabel\n                                    control={<Checkbox checked={state.id} onChange={handleChange} name={7} />}\n                                    label={\"Strategic\"}\n                                />\n                                <FormControlLabel\n                                    control={<Checkbox checked={state.id} onChange={handleChange} name={8} />}\n                                    label={\"Humorous\"}\n                                />\n                                <FormControlLabel\n                                    control={<Checkbox checked={state.id} onChange={handleChange} name={9} />}\n                                    label={\"Creative\"}\n                                />\n                                <FormControlLabel\n                                    control={<Checkbox checked={state.id} onChange={handleChange} name={10} />}\n                                    label={\"Carry\"}\n                                />\n                            </Box> */}\n                            <Button variant=\"contained\" color=\"secondary\" onClick={handleSubmit} className=\"submit-button\">Edit Review</Button>\n                        </FormControl>\n                    </CardContent>\n                </Card>\n            <Grid item xs={4}/>\n        </Grid>\n    )\n}\n\nexport default EditReview\n","/Users/jeremyarmah/Flatiron/code/Mod5/phase5-project/react-lfg/src/components/dashboard/ReceivedComments.js",[],"/Users/jeremyarmah/Flatiron/code/Mod5/phase5-project/react-lfg/src/components/UserGameDetailCard.js",[],{"ruleId":"128","replacedBy":"129"},{"ruleId":"130","replacedBy":"131"},{"ruleId":"132","severity":1,"message":"133","line":3,"column":35,"nodeType":"134","messageId":"135","endLine":3,"endColumn":45},{"ruleId":"136","severity":1,"message":"137","line":120,"column":1,"nodeType":"138","messageId":"139","endLine":125,"endColumn":23},{"ruleId":"136","severity":1,"message":"137","line":126,"column":17,"nodeType":"138","messageId":"139","endLine":135,"endColumn":48},{"ruleId":"132","severity":1,"message":"140","line":60,"column":12,"nodeType":"134","messageId":"135","endLine":60,"endColumn":16},{"ruleId":"132","severity":1,"message":"141","line":2,"column":8,"nodeType":"134","messageId":"135","endLine":2,"endColumn":14},{"ruleId":"132","severity":1,"message":"142","line":3,"column":8,"nodeType":"134","messageId":"135","endLine":3,"endColumn":13},{"ruleId":"128","replacedBy":"143"},{"ruleId":"130","replacedBy":"144"},{"ruleId":"145","severity":1,"message":"146","line":50,"column":7,"nodeType":"147","endLine":50,"endColumn":9,"suggestions":"148"},{"ruleId":"132","severity":1,"message":"149","line":63,"column":11,"nodeType":"134","messageId":"135","endLine":63,"endColumn":21},{"ruleId":"145","severity":1,"message":"150","line":107,"column":8,"nodeType":"147","endLine":107,"endColumn":10,"suggestions":"151"},{"ruleId":"132","severity":1,"message":"152","line":1,"column":27,"nodeType":"134","messageId":"135","endLine":1,"endColumn":36},{"ruleId":"132","severity":1,"message":"153","line":5,"column":42,"nodeType":"134","messageId":"135","endLine":5,"endColumn":52},{"ruleId":"132","severity":1,"message":"154","line":5,"column":54,"nodeType":"134","messageId":"135","endLine":5,"endColumn":59},{"ruleId":"132","severity":1,"message":"155","line":5,"column":61,"nodeType":"134","messageId":"135","endLine":5,"endColumn":70},{"ruleId":"132","severity":1,"message":"156","line":5,"column":72,"nodeType":"134","messageId":"135","endLine":5,"endColumn":88},{"ruleId":"132","severity":1,"message":"133","line":5,"column":90,"nodeType":"134","messageId":"135","endLine":5,"endColumn":100},{"ruleId":"132","severity":1,"message":"157","line":5,"column":102,"nodeType":"134","messageId":"135","endLine":5,"endColumn":105},{"ruleId":"132","severity":1,"message":"158","line":5,"column":113,"nodeType":"134","messageId":"135","endLine":5,"endColumn":120},"no-native-reassign",["159"],"no-negated-in-lhs",["160"],"no-unused-vars","'Typography' is defined but never used.","Identifier","unusedVar","no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","'tags' is assigned a value but never used.","'purple' is defined but never used.","'green' is defined but never used.",["159"],["160"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'otherUser', 'talkjsContainer', and 'user'. Either include them or remove the dependency array.","ArrayExpression",["161"],"'handleOpen' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'currentUser.id'. Either include it or remove the dependency array.",["162"],"'useEffect' is defined but never used.","'InputLabel' is defined but never used.","'Input' is defined but never used.","'TextField' is defined but never used.","'TextareaAutosize' is defined but never used.","'Box' is defined but never used.","'Divider' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"163","fix":"164"},{"desc":"165","fix":"166"},"Update the dependencies array to be: [otherUser, talkjsContainer, user]",{"range":"167","text":"168"},"Update the dependencies array to be: [currentUser.id]",{"range":"169","text":"170"},[1642,1644],"[otherUser, talkjsContainer, user]",[3142,3144],"[currentUser.id]"]